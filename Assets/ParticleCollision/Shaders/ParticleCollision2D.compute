#pragma kernel ResetParticlesKernel
#pragma kernel ResetSpatialPartitionKernel

#pragma kernel SpatialPartitionKernel
#pragma kernel ParticlesKernel
#pragma kernel UpdateBufferKernel

#pragma kernel RenderKernel

#define MAX_PARTICLES_PER_CELL 128
#define MAX_PARTICLE_VELOCITY_MAG 3
#define MIN_PARTICLE_SIZE 2
#include "Utils.cginc"

RWTexture2D<float4> outTexture;
RWTexture2D<float4> obstacleTexture;

struct Particle
{
    float2 position;
    float2 velocity;
    float4 color;
    int size;
};

RWStructuredBuffer<Particle> particlesBufferRead;
RWStructuredBuffer<Particle> particlesBuffer;
RWStructuredBuffer<int> spatialPartitionBuffer;

uint time;
float deltaTime;

int spatialRange;
uint spatialDivisions;
bool useSpatialPartitioning;

float gravityForce;
float friction;
float massMatters;
float bounceWall;
float bounceObstacles;
float bounceParticle;
float2 wallPortion;
float spacing;
float dirMult;
bool collideWithObstacles;

float2 rez;
uint particlesCount;
float colorDecay;
int particleSize;
float4 obstacleColor;
float4 particleColor;
bool randomSize;
bool randomColor;

float circleSmooth;
int circleRenderType;
float4 circlePercentage;

bool useMouseToCreateObstacles;
float2 mouseStrength;
float2 mouseTrigger;
float2 mouseUV;
float2 mouseRadius;
float4 mouseColor;
float4 mouseRightClickColor;
float4 mouseLeftClickColor;

//// MOUSE --->
float MousePixelDist(float2 p)
{
    float aspect = rez.x / rez.y;
    float2 uv = (p / rez);
    float2 diff = uv - mouseUV;
    diff.y /= aspect;
    return length(diff);
}

void RenderMouseTrigger(uint2 id, float trigger, float4 colorObstacle, float4 colorOut)
{
    if (trigger == 0) return;
    if (!useMouseToCreateObstacles)
    {
        outTexture[id] = colorOut + obstacleTexture[id];
        return;
    }

    obstacleTexture[id] = colorObstacle;
}

void RenderMouseInteraction(uint2 id)
{
    if (MousePixelDist((float2) id.xy) >= mouseRadius.x) return;
    outTexture[id.xy] = mouseColor;
    RenderMouseTrigger(id, mouseTrigger.x, obstacleColor, mouseLeftClickColor);
    RenderMouseTrigger(id, mouseTrigger.y, float4(0, 0, 0, 1), mouseRightClickColor);
}

void AddMouseForce(inout float2 velocity, float2 position)
{
    if (MousePixelDist(position) >= mouseRadius.x * mouseRadius.y) return;
    float2 dir = normalize(mouseUV - position / rez);
    // float strength = 1 - d / mouseRadius.x;

    if (mouseTrigger.x > 0)
    {
        velocity += dir;
        velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG) * mouseStrength.x;
    }
    
    else if (mouseTrigger.y > 0)
    {
        velocity -= dir;
        velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG) * mouseStrength.y;
    }
}
//// MOUSE <---

/// RENDER --->
bool PixelInsideCircleType(float mag, float radius)
{
    float rx = radius * circlePercentage.x;
    float ry = radius * circlePercentage.y;
    float rz = radius * circlePercentage.z;
    float rw = radius * circlePercentage.w;

    return (mag < radius) * (circleRenderType == 0) + 
    (mag < rx && mag > ry) * (circleRenderType == 1) +
    ((mag < rx && mag > ry) || mag < rz || mag == round(rw)) * (circleRenderType == 2) +
    (mag == round(rx) || mag == round(ry)) * (circleRenderType == 3) + 
    (mag == round(rx) || mag == round(ry) || mag < rz) * (circleRenderType == 4) +
    (mag < rx || mag < ry) * (circleRenderType == 5);
}

void DrawCircle(float2 center, int radius, float4 color)
{
    int2 c = round(center);

    if (radius <= 1)
    {
        outTexture[c] = color;
        return;
    }
    
    float mag, strength;
    for (int i = -radius; i <= radius; i++)
    {
        for (int j = -radius; j <= radius; j++)
        {
            mag = length(float2(i, j));
            if (!PixelInsideCircleType(mag, radius)) continue;
            strength = 1 - mag / radius;
            strength = lerp(1, strength, circleSmooth);
            outTexture[c + int2(i, j)] = float4(color.xyz * strength, 1);
        }
    }
}
/// RENDER <---

/// PHYSICS --->
float ParticleMass(int size)
{
    float m = size / (float) particleSize;
    return lerp(1, m, massMatters);
}

void AddGravity(inout float2 velocity, int size)
{
    float2 gravity = float2(0, -1) * gravityForce;
    velocity += gravity * ParticleMass(size);
    velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG);
}

void AddFriction(inout float2 velocity)
{
    velocity *= (1 - friction);
    velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG);
}
/// PHYSICS <---

/// COLLISION --->
void IterateColllision(inout float2 position, inout float2 velocity, int size, uint id, uint i)
{
    if (i == id)
        return;

    Particle other = particlesBufferRead[i];
    float2 diff = position - other.position;
    float rad = (size + other.size) * spacing;
    float mag = length(diff);

    if (mag >= rad) return;
    
    float m1 = ParticleMass(size);
    float m2 = ParticleMass(other.size);
    float rel = 1 - m1 / (m1 + m2);

    float overlap = (rad - mag) * rel;
    float2 dir = normalize(diff) * overlap * dirMult;
    
    velocity += dir * bounceParticle;
    velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG);
}

void ParticleCollision(float2 position, inout float2 velocity, int size, uint id)
{
    for (uint i = 0; i < particlesCount; i++)
        IterateColllision(position, velocity, size, id, i);
}

void ParticleCollisionGrid(float2 position, inout float2 velocity, int size, uint id)
{
    int particleIndex;
    int2 sSize = rez / spatialDivisions;
    uint2 cell = floor(position / sSize);
    uint cellX, startIndex;

    for (int i = -spatialRange; i <= spatialRange; i ++)
    {
        cellX = (cell.x + i) % spatialDivisions;
        for (int j = -spatialRange; j <= spatialRange; j ++)
        {
            startIndex = (cellX + (cell.y + j) % spatialDivisions * spatialDivisions) * MAX_PARTICLES_PER_CELL;
            
            for (uint k = 0; k < MAX_PARTICLES_PER_CELL; k ++)
            {
                particleIndex = spatialPartitionBuffer[startIndex + k];
                if (particleIndex == -1) continue;
                IterateColllision(position, velocity, size, id, particleIndex);
            }
        }
    }
}

void ObstacleCollision(inout float2 position, inout float2 velocity, int size)
{
    int arraySize = 4;
    float2 corners[4];
    float2 collisions[4];

    corners[0] = position + float2(-size, 0);
    corners[1] = position + float2(size, 0);
    corners[2] = position + float2(0, -size);
    corners[3] = position + float2(0, size);

    float2 col = 0;
    float2 dir, pos;
    bool trapped = true;

    for (int k = 0; k < arraySize; k++)
    {
        pos = corners[k];
        dir = normalize(position - corners[k]);
        bool hit = false;

        while (obstacleTexture[int2(pos) - dir].x > 0 && length(pos - corners[k]) < length(position - rez * dir))
        {
            hit = true;
            pos += dir;
        }

        trapped = trapped && hit;
        collisions[k] = (pos - corners[k]);
        col += collisions[k];
    }

    if (length(col) == 0) return;

    col /= arraySize;
    if (trapped)
    {
        float r = random(position.x * .0001 + time * .001);
        col = collisions[(int) (r * arraySize)];
    }

    position += col;
    velocity = normalize(col) * bounceObstacles;
    velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG);
}

void WallCollision(inout float2 position, inout float2 velocity, int size)
{
    float sizeWallY = rez.y * (1 - wallPortion.y);
    float sizeWallX = rez.x * (1 - wallPortion.x);

    if (position.x < size + sizeWallX)
    {
        position.x = size + sizeWallX;
        velocity.x = -velocity.x * bounceWall;
    }
    else if (position.x > rez.x - size - sizeWallX)
    {
        position.x = rez.x - size - sizeWallX;
        velocity.x = -velocity.x * bounceWall;
    }

    if (position.y < size + sizeWallY)
    {
        position.y = size + sizeWallY;
        velocity.y = -velocity.y * bounceWall;
    }
    else if (position.y > rez.y - size - sizeWallY)
    {
        position.y = rez.y - size - sizeWallY;
        velocity.y = -velocity.y * bounceWall;
    }
    
    velocity = clamp(velocity, -MAX_PARTICLE_VELOCITY_MAG, MAX_PARTICLE_VELOCITY_MAG);
}
/// COLLISION <---

/// KERNELS --->
[numthreads(64, 1, 1)]
void ResetParticlesKernel(uint3 id : SV_DispatchThreadID)
{
    float2 randDir = Random(id.x * .0001 + time * .001);
    float rand = random(id.x * .0001 + time * .001);

    Particle particle;
    particle.position = randDir * rez;
    particle.velocity = float2(0, 0);

    particle.color = particleColor;
    if (randomColor)
        particle.color = HUEtoRGB(rand);

    particle.size = particleSize;
    if (randomSize)
        particle.size = rand * particleSize + MIN_PARTICLE_SIZE;
    
    particlesBuffer[id.x] = particle;
    particlesBufferRead[id.x] = particle;
}

[numthreads(64, 1, 1)]
void ResetSpatialPartitionKernel(uint3 id : SV_DispatchThreadID)
{
    spatialPartitionBuffer[id.x] = -1;
}

[numthreads(64, 1, 1)]
void SpatialPartitionKernel(uint3 id : SV_DispatchThreadID)
{
    Particle particle = particlesBufferRead[id.x];
    
    int2 sSize = rez / spatialDivisions;
    uint2 cell = floor(particle.position / sSize);
    int arrayIndex = (cell.x + cell.y * spatialDivisions) * MAX_PARTICLES_PER_CELL;
    
    // Fix grid collision
    // CONCLUSION: Hash function is not good enough for this purpose, since every particle need to have unique id. If a particle is left out, a cascade effect will occur.
    float hash = random(id.x);
    int index = round(hash * (MAX_PARTICLES_PER_CELL - 1));

    spatialPartitionBuffer[arrayIndex + index] = id.x;
}

[numthreads(64, 1, 1)]
void ParticlesKernel(uint3 id : SV_DispatchThreadID)
{
    Particle particle = particlesBufferRead[id.x];
    AddGravity(particle.velocity, particle.size);
    AddFriction(particle.velocity);
    if (!useMouseToCreateObstacles) AddMouseForce(particle.velocity, particle.position);

    if (useSpatialPartitioning) ParticleCollisionGrid(particle.position, particle.velocity, particle.size, id.x);
    else ParticleCollision(particle.position, particle.velocity, particle.size, id.x);

    particle.position += particle.velocity;
    if (collideWithObstacles) ObstacleCollision(particle.position, particle.velocity, particle.size);
    WallCollision(particle.position, particle.velocity, particle.size);

    DrawCircle(particle.position, particle.size, particle.color * particleColor);
    particlesBuffer[id.x] = particle;
}

[numthreads(64, 1, 1)]
void UpdateBufferKernel(uint3 id : SV_DispatchThreadID)
{
    particlesBufferRead[id.x] = particlesBuffer[id.x];
}

[numthreads(32, 32, 1)]
void RenderKernel(uint3 id : SV_DispatchThreadID)
{
    float3 obstacleColor = obstacleTexture[id.xy].xyz;
    float3 outColor = outTexture[id.xy].xyz;

    obstacleTexture[id.xy] = float4(obstacleColor, 1);

    float3 color = outColor * (1 - colorDecay);
    color += obstacleColor;
    outTexture[id.xy] = float4(saturate(color), 1);
    RenderMouseInteraction(id.xy);
}
/// KERNELS <---